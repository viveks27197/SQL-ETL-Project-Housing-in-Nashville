 /****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [UniqueID ]
      ,[ParcelID]
      ,[LandUse]
      ,[PropertyAddress]
      ,[SaleDate]
      ,[SalePrice]
      ,[LegalReference]
      ,[SoldAsVacant]
      ,[OwnerName]
      ,[OwnerAddress]
      ,[Acreage]
      ,[TaxDistrict]
      ,[LandValue]
      ,[BuildingValue]
      ,[TotalValue]
      ,[YearBuilt]
      ,[Bedrooms]
      ,[FullBath]
      ,[HalfBath]
  FROM [Portfolio Project].[dbo].[NashvilleHousing]
  ----------------
  --Standardizing the Date format
  --The original Date values are in a very long timestamp format and not easily readable

  SELECT SaleDate2, CONVERT(Date, SaleDate)
  From [Portfolio Project]..NashvilleHousing

  Update NashvilleHousing
  SET SaleDate = CONVERT (Date, SaleDate)

  ALTER TABLE NashvilleHousing
  Add SaleDate2 Date; 

   Update NashvilleHousing
  SET SaleDate2 = CONVERT (Date, SaleDate)


 -----------------Populating Property Addresses
  -- It is seen that some property adresses are left blank. This makes it confusing.
  
  SELECT *
  From [Portfolio Project]..NashvilleHousing
  --Where PropertyAddress is null 
  order by ParcelID

  --Since ParcelID and PropertyAdress correspond, we will do an INNER JOIN to populate the empty spaces
   
   Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
   from [Portfolio Project]..NashvilleHousing a
   JOIN [Portfolio Project]..NashvilleHousing b
   on a.ParcelID = b.ParcelID
   AND a.[UniqueID ] <> b.[UniqueID ]
   Where a.PropertyAddress is null
   --Updating the null entries with the corresponding PropertyAddress
   Update a
   SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
   from [Portfolio Project]..NashvilleHousing a
   JOIN [Portfolio Project]..NashvilleHousing b
   on a.ParcelID = b.ParcelID
   AND a.[UniqueID ] <> b.[UniqueID ]

   --On running this block again, we get no null entries for PropertyAddress
   Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
   from [Portfolio Project]..NashvilleHousing a
   JOIN [Portfolio Project]..NashvilleHousing b
   on a.ParcelID = b.ParcelID
   AND a.[UniqueID ] <> b.[UniqueID ]
   Where a.PropertyAddress is null

   ----------Breaking down address into components (Address, City, State)

  SELECT PropertyAddress
  From [Portfolio Project]..NashvilleHousing
  --Where PropertyAddress is null 
  --order by ParcelID

  --Using comma delimiter
  SELECT
  SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1) as Address,
  SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress)+1 , LEN(PropertyAddress)) as Address
  
  from [Portfolio Project]..NashvilleHousing

  ---Adding the two new columns

  ALTER TABLE NashvilleHousing
  Add PropertySplitAddress Nvarchar(255); 

   Update NashvilleHousing
  SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1)

  ALTER TABLE NashvilleHousing
  Add PropertySplitCity Nvarchar(255); 

   Update NashvilleHousing
  SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress)+1 , LEN(PropertyAddress))

  Select *
  From [Portfolio Project]..NashvilleHousing

  --------------------

   Select OwnerAddress
  From [Portfolio Project]..NashvilleHousing

  Select
  PARSENAME(REPLACE(OwnerAddress,',','.'),3),
  PARSENAME(REPLACE(OwnerAddress,',','.'),2),
  PARSENAME(REPLACE(OwnerAddress,',','.'),1)

  From [Portfolio Project]..NashvilleHousing

  ALTER TABLE NashvilleHousing
  Add OwnerSplitAddress Nvarchar(255); 

   Update NashvilleHousing
  SET OwnerSplitAddress= PARSENAME(REPLACE(OwnerAddress,',','.'),3)

  ALTER TABLE NashvilleHousing
  Add OwnerSplitCity Nvarchar(255); 

   Update NashvilleHousing
  SET OwnerSplitCity =PARSENAME(REPLACE(OwnerAddress,',','.'),2)

  ALTER TABLE NashvilleHousing
  Add OwnerSplitState Nvarchar(255); 

   Update NashvilleHousing
  SET OwnerSplitState=PARSENAME(REPLACE(OwnerAddress,',','.'),1)

  ----------------------To change Y and N to Yes and No in the column "Sold as Vacant"

  Select Distinct(SoldAsVacant), Count(SoldAsVacant)
  From [Portfolio Project]..NashvilleHousing
  Group by SoldAsVacant
  order by 2

  Select SoldAsVacant,
  CASE When SoldAsVacant='Y' THEN 'Yes'
       When SoldasVacant='N' THEN 'No'
	   Else SoldAsVacant
	   END
  From [Portfolio Project]..NashvilleHousing

  Update NashvilleHousing
  SET SoldAsVacant= CASE When SoldAsVacant='Y' THEN 'Yes'
       When SoldasVacant='N' THEN 'No'
	   Else SoldAsVacant
	   END

--------------------Remove Duplicates
--Constrcuting a CTE and internally partitioning it on various parameters to detect duplicates
WITH RowNumCTE AS(
Select *,
   ROW_NUMBER() OVER(
   PARTITION BY ParcelID,
                PropertyAddress,
				SalePrice,
				SaleDate,
				LegalReference
				ORDER BY
				 UniqueID
				 ) row_num
From [Portfolio Project]..NashvilleHousing
--order by ParcelID
)
DELETE
From RowNumCTE
Where row_num > 1
--Order by PropertyAddress

-------------------Delete Redundant Columns

Select *
From [Portfolio Project]..NashvilleHousing

ALTER TABLE [Portfolio Project]..NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

ALTER TABLE [Portfolio Project]..NashvilleHousing
DROP COLUMN  SaleDate